import { __assign, __awaiter, __generator } from "tslib";
jest.useFakeTimers("modern");
var now = 1613699814645;
jest.setSystemTime(now);
var mockParseKnowFiles = jest.fn();
var mockGetMasterProfileName = jest.fn();
jest.mock("@aws-sdk/credential-provider-ini", function () { return ({
    parseKnownFiles: mockParseKnowFiles,
    getMasterProfileName: mockGetMasterProfileName,
}); });
var mockReadFileSync = jest.fn();
jest.mock("fs", function () { return ({ readFileSync: mockReadFileSync }); });
var mockRoleCredentials = {
    roleCredentials: {
        accessKeyId: "key",
        secretAccessKey: "secret",
        sessionToken: "token",
        expiration: Date.now(),
    },
};
var mockSSOSend = jest.fn().mockReturnValue(Promise.resolve(mockRoleCredentials));
var mockGetRoleCredentialsCommand = jest.fn();
jest.mock("@aws-sdk/client-sso", function () { return ({
    SSOClient: function () {
        return { send: mockSSOSend };
    },
    GetRoleCredentialsCommand: mockGetRoleCredentialsCommand,
}); });
import { EXPIRE_WINDOW_MS, fromSSO } from "./index";
var toRFC3339String = function (date) {
    var timestamp = new Date(date).toISOString();
    return timestamp.replace(/\.[\d]+Z$/, "Z");
};
describe("fromSSO", function () {
    var ssoConfig = {
        sso_start_url: "https:some-url/start",
        sso_account_id: "1234567890",
        sso_region: "us-foo-1",
        sso_role_name: "some-role",
    };
    var token = {
        startUrl: ssoConfig.sso_start_url,
        region: ssoConfig.sso_region,
        accessToken: "base64 encoded string",
        expiresAt: toRFC3339String(now + 60 * 60 * 1000),
    };
    beforeEach(function () {
        mockParseKnowFiles.mockClear();
        mockGetMasterProfileName.mockClear();
        mockReadFileSync.mockClear();
        mockSSOSend.mockClear();
    });
    it("should fetch credentials from resolved token file", function () { return __awaiter(void 0, void 0, void 0, function () {
        var roleCredentials, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    mockReadFileSync.mockReturnValue(JSON.stringify(token));
                    roleCredentials = mockRoleCredentials.roleCredentials;
                    _a = expect;
                    return [4 /*yield*/, fromSSO()()];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual(__assign(__assign({}, roleCredentials), { expiration: new Date(roleCredentials.expiration) }));
                    expect(mockReadFileSync.mock.calls[0][0]).toEqual(expect.stringMatching(/fcab95d6966151d97d9ee7776a90d895b5e5fbe6.json$/));
                    expect(mockReadFileSync.mock.calls[0][1]).toMatchObject({ encoding: "utf-8" });
                    expect(mockGetRoleCredentialsCommand).toHaveBeenCalledWith({
                        accountId: ssoConfig.sso_account_id,
                        roleName: ssoConfig.sso_role_name,
                        accessToken: token.accessToken,
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it("should allow supplying custom client", function () { return __awaiter(void 0, void 0, void 0, function () {
        var newSSOClient;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    mockReadFileSync.mockReturnValue(JSON.stringify(token));
                    newSSOClient = { send: jest.fn().mockReturnValue(Promise.resolve(mockRoleCredentials)) };
                    //@ts-expect-error
                    return [4 /*yield*/, fromSSO({ ssoClient: newSSOClient })()];
                case 1:
                    //@ts-expect-error
                    _a.sent();
                    expect(newSSOClient.send).toHaveBeenCalled();
                    expect(mockSSOSend).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should throw if profile doesn't exist in the config files", function () {
        var profile = "exist";
        mockParseKnowFiles.mockReturnValue(Promise.resolve({ non_exist: { foo: "bar" } }));
        mockGetMasterProfileName.mockReturnValue(profile);
        return expect(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fromSSO()()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }).rejects.toMatchObject({
            message: "Profile " + profile + " could not be found in shared credentials file.",
            tryNextLink: true,
        });
    });
    it("should throw if profile is not configured with SSO credential", function () {
        var _a;
        var profile = "exist";
        mockParseKnowFiles.mockReturnValue(Promise.resolve((_a = {}, _a[profile] = { foo: "bar" }, _a)));
        mockGetMasterProfileName.mockReturnValue(profile);
        return expect(function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fromSSO()()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }).rejects.toMatchObject({
            message: "Profile " + profile + " is not configured with SSO credentials.",
            tryNextLink: true,
        });
    });
    var _loop_1 = function (i) {
        var keyToRemove = Object.keys(ssoConfig)[i];
        it("should throw if sso configuration is missing " + keyToRemove, function () { return __awaiter(void 0, void 0, void 0, function () {
            var config, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        config = __assign({}, ssoConfig);
                        //@ts-ignore
                        delete config[keyToRemove];
                        mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: config }));
                        mockGetMasterProfileName.mockReturnValue("default");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fromSSO()()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        expect(e_1.message).toContain("Profile default does not have valid SSO credentials.");
                        expect(e_1.tryNextLink).toBeFalsy();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); });
    };
    for (var i = 0; i < Object.keys(ssoConfig).length; i++) {
        _loop_1(i);
    }
    it("should throw if token cache file is not found", function () { return __awaiter(void 0, void 0, void 0, function () {
        var e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    mockReadFileSync.mockImplementation(function () {
                        throw new Error("File not found.");
                    });
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fromSSO()()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_2 = _a.sent();
                    expect(e_2.message).toContain("The SSO session associated with this profile has expired or is otherwise invalid.");
                    expect(e_2.tryNextLink).toBeFalsy();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("should throw if token cache file is invalid", function () { return __awaiter(void 0, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    mockReadFileSync.mockReturnValue("invalid JSON content");
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fromSSO()()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_3 = _a.sent();
                    expect(e_3.message).toContain("The SSO session associated with this profile has expired or is otherwise invalid.");
                    expect(e_3.tryNextLink).toBeFalsy();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("should throw if token cache is expired", function () { return __awaiter(void 0, void 0, void 0, function () {
        var e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    mockReadFileSync.mockReturnValue(__assign(__assign({}, token), { expiration: toRFC3339String(now + EXPIRE_WINDOW_MS - 2) }));
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fromSSO()()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_4 = _a.sent();
                    expect(e_4.message).toContain("The SSO session associated with this profile has expired or is otherwise invalid.");
                    expect(e_4.tryNextLink).toBeFalsy();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("should throw if SSO client throws", function () { return __awaiter(void 0, void 0, void 0, function () {
        var clientError, e_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(3);
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    mockReadFileSync.mockReturnValue(JSON.stringify(token));
                    clientError = new Error("No account is found for the user");
                    //@ts-ignore
                    clientError.$fault = "client";
                    mockSSOSend.mockImplementation(function () { return __awaiter(void 0, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            throw clientError;
                        });
                    }); });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fromSSO()()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_5 = _a.sent();
                    expect(e_5.message).toContain(clientError.message);
                    expect(e_5.tryNextLink).toBeFalsy();
                    expect(e_5.$fault).toBe("client");
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
    it("should throw if credentials from SSO client is invalid", function () { return __awaiter(void 0, void 0, void 0, function () {
        var e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    mockReadFileSync.mockReturnValue(JSON.stringify(token));
                    mockParseKnowFiles.mockReturnValue(Promise.resolve({ default: ssoConfig }));
                    mockGetMasterProfileName.mockReturnValue("default");
                    mockSSOSend.mockResolvedValue({
                        roleCredentials: __assign(__assign({}, mockRoleCredentials.roleCredentials), { accessKeyId: undefined }),
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, fromSSO()()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    e_6 = _a.sent();
                    expect(e_6.message).toContain("SSO returns an invalid temporary credential.");
                    expect(e_6.tryNextLink).toBeFalsy();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;base64,