import { DynamoDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DynamoDBClient";
import { ExecuteTransactionInput, ExecuteTransactionOutput } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type ExecuteTransactionCommandInput = ExecuteTransactionInput;
export declare type ExecuteTransactionCommandOutput = ExecuteTransactionOutput & __MetadataBearer;
/**
 * <p>
 * This operation allows you to perform transactional reads or writes on data stored in DynamoDB, using PartiQL.
 * </p>
 */
export declare class ExecuteTransactionCommand extends $Command<ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput, DynamoDBClientResolvedConfig> {
    readonly input: ExecuteTransactionCommandInput;
    constructor(input: ExecuteTransactionCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DynamoDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteTransactionCommandInput, ExecuteTransactionCommandOutput>;
    private serialize;
    private deserialize;
}
